<?php
// config.php

define('DB_HOST', 'localhost');
define('DB_NAME', 'dfw2');
define('DB_USER', 'root');
define('DB_PASS', 'D3@n2277');

session_start();

// Step 1: Connect to DB
require_once __DIR__ . '/db.php'; // ✅ this defines $pdo

// Step 2: Load functions AFTER db is ready
require_once __DIR__ . '/functions.php'; // ✅ this now safely uses $pdo

// Step 3 (optional): Define constants using get_setting()
define('SITE_NAME', get_setting('site_name', 'My Site'));
define('SITE_DESCRIPTION', get_setting('site_description', 'My CMS'));
define('THEME', get_setting('theme', 'default'));



/*********************************************************************************
* PHP Error Reporting Levels:
*
* Mainly used in mainfile.php and is directly related
* to the $display_errors setting in the main config.php file.  If $display_errors
* is set to "true" then this setting will be used by PHP.  Otherwise it will be
* ignored.  Below are the possible settings:
*
* Value   Constant                          Description
* ------  --------------------------------  ------------------------------------------------------------------------------------
* 1       E_ERROR (integer)                 Fatal run-time errors. These indicate errors that can not be recovered from,
*                                             such as a memory allocation problem.  Execution of the script is halted.
* 2       E_WARNING (integer)               Run-time warnings (non-fatal errors). Execution of the script is not halted.
* 4       E_PARSE (integer)                 Compile-time parse errors. Parse errors should only be generated by the parser.
* 8       E_NOTICE (integer)                Run-time notices. Indicate that the script encountered something that could
*                                             indicate an error, but could also happen in the normal course of running a script.
* 16      E_CORE_ERROR (integer)            Fatal errors that occur during PHP's initial startup. This is like an E_ERROR,
*                                             except it is generated by the core of PHP. (Since PHP 4.)
* 32      E_CORE_WARNING (integer)          Warnings (non-fatal errors) that occur during PHP's initial startup. This is like
*                                             an E_WARNING, except it is generated by the core of PHP.  (Since PHP 4.)
* 64      E_COMPILE_ERROR (integer)         Fatal compile-time errors. This is like an E_ERROR, except it is generated by the
*                                             Zend Scripting Engine.  (Since PHP 4.)
* 128     E_COMPILE_WARNING (integer)       Compile-time warnings (non-fatal errors).  This is like an E_WARNING, except it is
*                                             generated by the Zend Scripting Engine.  (Since PHP 4.)
* 256     E_USER_ERROR (integer)            User-generated error message. This is like an E_ERROR, except it is generated in
*                                             PHP code by using the PHP function trigger_error().  (Since PHP 4.)
* 512     E_USER_WARNING (integer)          User-generated warning message. This is like an E_WARNING, except it is generated
*                                             in PHP code by using the PHP function trigger_error().  (Since PHP 4.)
* 1024    E_USER_NOTICE (integer)           User-generated notice message. This is like an E_NOTICE, except it is generated in
*                                             PHP code by using the PHP function trigger_error().  (Since PHP 4.)
* 2048    E_STRICT (integer)                Run-time notices. Enable to have PHP suggest changes to your code which will ensure
*                                             the best interoperability and forward compatibility of your code.  (Since PHP 5.)
* 4096    E_RECOVERABLE_ERROR (integer)     Catchable fatal error. It indicates that a probably dangerous error occured, but did
*                                             not leave the Engine in an unstable state. If the error is not caught by a user
*                                             defined handle (see also set_error_handler()), the application aborts as it was
*                                             an E_ERROR.  (Since PHP 5.2.)
* 8192    E_DEPRECATED (integer)            Run-time notices. Enable this to receive warnings about code that will not work in
*                                             future versions.  (Since PHP 5.3.0.)
* 16384   E_USER_DEPRECATED (integer)       User-generated warning message. This is like an E_DEPRECATED, except it is generated in
*                                             PHP code by using the PHP function trigger_error().  (Since PHP 5.3.0.)
* 30719   E_ALL (integer)                   All errors and warnings, as supported, except of level E_STRICT in PHP < 6.  (32767 in
*                                             PHP 6, 30719 in PHP 5.3.x, 6143 in PHP 5.2.x, 2047 previously.)
*********************************************************************************/
$error_reporting = E_ALL; // This is the default and means: All errors except Notices
//if (defined('E_DEPRECATED')) $error_reporting = $error_reporting^E_DEPRECATED; // If want to see these warnings when running PHP5.3, comment out this IF statement
